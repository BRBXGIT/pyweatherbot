from config import tg_token, token
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import requests
import datetime
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from db import BotDB
from new_city import Ask
from aiogram.dispatcher.storage import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

#–í—Å—è–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BotDB = BotDB('citys.db')
bot = Bot(token=tg_token)
dp = Dispatcher(bot, storage=MemoryStorage())


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
	BotDB.add_user(message.from_user.id)
	await message.reply('–ü—Ä–∏–≤–µ—Ç, –µ—Å–ª–∏ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —è –ø–æ–∫–∞–∂—É –µ–≥–æ –ø–æ–≥–æ–¥—É\n\n'
						'–ß—Ç–æ-–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å —Ç–≤–æ–∏–º –≥–æ—Ä–æ–¥–æ–º –≤–≤–µ–¥–∏ /new_city , –∞ –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –¢–∞–∫ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ)')


#–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
@dp.message_handler(commands=['new_city'])
async def add_city(message: types.Message):
	await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥: ')
	await Ask.Q1.set()


#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –≥–æ—Ä–æ–¥–æ–º
@dp.message_handler(state=Ask.Q1)
async def add_to_db(message: types.Message, state: FSMContext):
	answer = message.text
	BotDB.add_city(message.from_user.id, answer)

	city = str(BotDB.get_city(message.from_user.id)).strip("'[](),'")

	all_keyboard = ReplyKeyboardMarkup(
	keyboard = [
		[
			KeyboardButton(text=city)
		]
	],
	resize_keyboard=True
	)

	await message.answer(f'–ì–æ—Ä–æ–¥ {city} –¥–æ–±–∞–≤–ª–µ–Ω)', reply_markup=all_keyboard)
	await state.update_data(answer1=answer)

	await state.finish()


#–ü–∞—Ä—Å–∏–Ω–≥ –∏ –ø–æ—Å–ª–µ–¥—É—â–∏–π –≤—ã–≤–æ–¥ –ø–æ–≥–æ–¥—ã
@dp.message_handler()
async def get_weather(message: types.Message):

	code_to_smile = {

	'Clear': '–Ø—Å–Ω–æ ‚òÄÔ∏è',
	'Clouds': '–û–±–ª–∞—á–Ω–æ ‚òÅÔ∏è',
	'Rain': '–î–æ–∂–¥—å üåß',
	'Thunderstorm': '–ì—Ä–æ–∑–∞ ‚õà',
	'Snow': '–°–Ω–µ–≥ üå®',
	'Mist': '–¢—É–º–∞–Ω üå´'

	}

	try:
		r = requests.get(
			f'http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={token}&units=metric'
			)
		data = r.json()

		city = data['name']
		cur_weather = data['main']['temp']

		weather_description = data['weather'][0]['main']
		if weather_description in code_to_smile:
			wd = code_to_smile[weather_description]
		else:
			wd = '–í—ã–≥–ª—è–Ω–∏ –≤ –æ–∫–Ω–æüôÉ'


		humidity = data['main']['humidity']
		pressure = data['main']['pressure']
		wind = data['wind']['speed']
		day_lenght = datetime.datetime.fromtimestamp(data['sys']['sunset']) - datetime.datetime.fromtimestamp(data['sys']['sunrise'])

		await message.reply(	f'*** {datetime.datetime.now().strftime("%d-%m-%Y %H:%M")} ***\n'
				f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather} C¬∞ {wd}\n\n'
				f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity} %\n\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º. —Ä—Ç. —Å—Ç.\n\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind} –º/—Å\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {day_lenght}\n\n'
			)
			
	except:
		await message.reply('–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç)')


if __name__ == '__main__':
	executor.start_polling(dp)